/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConnectionEvent,
    ConnectionEventFromJSON,
    ConnectionEventFromJSONTyped,
    ConnectionEventToJSON,
} from './ConnectionEvent';
import {
    ConnectionType,
    ConnectionTypeFromJSON,
    ConnectionTypeFromJSONTyped,
    ConnectionTypeToJSON,
} from './ConnectionType';
import {
    Population,
    PopulationFromJSON,
    PopulationFromJSONTyped,
    PopulationToJSON,
} from './Population';
import {
    Session,
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
} from './Session';
import {
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     * 
     * @type {boolean}
     * @memberof Connection
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    connectionID?: string;
    /**
     * 
     * @type {Array<ConnectionEvent>}
     * @memberof Connection
     */
    events?: Array<ConnectionEvent>;
    /**
     * 
     * @type {number}
     * @memberof Connection
     */
    connectionTypeId?: number;
    /**
     * 
     * @type {ConnectionType}
     * @memberof Connection
     */
    connectionType?: ConnectionType;
    /**
     * 
     * @type {number}
     * @memberof Connection
     */
    populationId?: number;
    /**
     * 
     * @type {Population}
     * @memberof Connection
     */
    population?: Population;
    /**
     * 
     * @type {number}
     * @memberof Connection
     */
    sessionId?: number;
    /**
     * 
     * @type {Session}
     * @memberof Connection
     */
    session?: Session;
    /**
     * 
     * @type {string}
     * @memberof Connection
     */
    userId?: string;
    /**
     * 
     * @type {User}
     * @memberof Connection
     */
    user?: User;
    /**
     * 
     * @type {number}
     * @memberof Connection
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Connection
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Connection
     */
    createdDate?: Date;
}

export function ConnectionFromJSON(json: any): Connection {
    return ConnectionFromJSONTyped(json, false);
}

export function ConnectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Connection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'active': !exists(json, 'active') ? undefined : json['active'],
        'connectionID': !exists(json, 'connectionID') ? undefined : json['connectionID'],
        'events': !exists(json, 'events') ? undefined : ((json['events'] as Array<any>).map(ConnectionEventFromJSON)),
        'connectionTypeId': !exists(json, 'connectionTypeId') ? undefined : json['connectionTypeId'],
        'connectionType': !exists(json, 'connectionType') ? undefined : ConnectionTypeFromJSON(json['connectionType']),
        'populationId': !exists(json, 'populationId') ? undefined : json['populationId'],
        'population': !exists(json, 'population') ? undefined : PopulationFromJSON(json['population']),
        'sessionId': !exists(json, 'sessionId') ? undefined : json['sessionId'],
        'session': !exists(json, 'session') ? undefined : SessionFromJSON(json['session']),
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'user': !exists(json, 'user') ? undefined : UserFromJSON(json['user']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function ConnectionToJSON(value?: Connection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'connectionID': value.connectionID,
        'events': value.events === undefined ? undefined : ((value.events as Array<any>).map(ConnectionEventToJSON)),
        'connectionTypeId': value.connectionTypeId,
        'connectionType': ConnectionTypeToJSON(value.connectionType),
        'populationId': value.populationId,
        'population': PopulationToJSON(value.population),
        'sessionId': value.sessionId,
        'session': SessionToJSON(value.session),
        'userId': value.userId,
        'user': UserToJSON(value.user),
        'id': value.id,
        'deleted': value.deleted,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

