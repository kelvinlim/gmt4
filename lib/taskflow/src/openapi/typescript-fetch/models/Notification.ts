/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    NotificationLog,
    NotificationLogFromJSON,
    NotificationLogFromJSONTyped,
    NotificationLogToJSON,
} from './NotificationLog';
import {
    NotificationRecipient,
    NotificationRecipientFromJSON,
    NotificationRecipientFromJSONTyped,
    NotificationRecipientToJSON,
} from './NotificationRecipient';
import {
    NotificationScheduleType,
    NotificationScheduleTypeFromJSON,
    NotificationScheduleTypeFromJSONTyped,
    NotificationScheduleTypeToJSON,
} from './NotificationScheduleType';
import {
    NotificationType,
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
} from './NotificationType';
import {
    Population,
    PopulationFromJSON,
    PopulationFromJSONTyped,
    PopulationToJSON,
} from './Population';

/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    body?: string;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    scheduledTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    notificationTypeId?: number;
    /**
     * 
     * @type {NotificationType}
     * @memberof Notification
     */
    notificationType?: NotificationType;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    notificationScheduleTypeId?: number;
    /**
     * 
     * @type {NotificationScheduleType}
     * @memberof Notification
     */
    notificationScheduleType?: NotificationScheduleType;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    populationId?: number;
    /**
     * 
     * @type {Population}
     * @memberof Notification
     */
    population?: Population;
    /**
     * 
     * @type {Array<NotificationLog>}
     * @memberof Notification
     */
    logs?: Array<NotificationLog>;
    /**
     * 
     * @type {Array<NotificationRecipient>}
     * @memberof Notification
     */
    recipients?: Array<NotificationRecipient>;
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Notification
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Notification
     */
    createdDate?: Date;
}

export function NotificationFromJSON(json: any): Notification {
    return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Notification {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'title': !exists(json, 'title') ? undefined : json['title'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'scheduledTime': !exists(json, 'scheduledTime') ? undefined : (new Date(json['scheduledTime'])),
        'notificationTypeId': !exists(json, 'notificationTypeId') ? undefined : json['notificationTypeId'],
        'notificationType': !exists(json, 'notificationType') ? undefined : NotificationTypeFromJSON(json['notificationType']),
        'notificationScheduleTypeId': !exists(json, 'notificationScheduleTypeId') ? undefined : json['notificationScheduleTypeId'],
        'notificationScheduleType': !exists(json, 'notificationScheduleType') ? undefined : NotificationScheduleTypeFromJSON(json['notificationScheduleType']),
        'populationId': !exists(json, 'populationId') ? undefined : json['populationId'],
        'population': !exists(json, 'population') ? undefined : PopulationFromJSON(json['population']),
        'logs': !exists(json, 'logs') ? undefined : ((json['logs'] as Array<any>).map(NotificationLogFromJSON)),
        'recipients': !exists(json, 'recipients') ? undefined : ((json['recipients'] as Array<any>).map(NotificationRecipientFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function NotificationToJSON(value?: Notification | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'title': value.title,
        'body': value.body,
        'scheduledTime': value.scheduledTime === undefined ? undefined : (value.scheduledTime.toISOString()),
        'notificationTypeId': value.notificationTypeId,
        'notificationType': NotificationTypeToJSON(value.notificationType),
        'notificationScheduleTypeId': value.notificationScheduleTypeId,
        'notificationScheduleType': NotificationScheduleTypeToJSON(value.notificationScheduleType),
        'populationId': value.populationId,
        'population': PopulationToJSON(value.population),
        'logs': value.logs === undefined ? undefined : ((value.logs as Array<any>).map(NotificationLogToJSON)),
        'recipients': value.recipients === undefined ? undefined : ((value.recipients as Array<any>).map(NotificationRecipientToJSON)),
        'id': value.id,
        'deleted': value.deleted,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

