/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DeviceConfigurationProperty,
    DeviceConfigurationPropertyFromJSON,
    DeviceConfigurationPropertyFromJSONTyped,
    DeviceConfigurationPropertyToJSON,
} from './DeviceConfigurationProperty';
import {
    DeviceProperty,
    DevicePropertyFromJSON,
    DevicePropertyFromJSONTyped,
    DevicePropertyToJSON,
} from './DeviceProperty';
import {
    Population,
    PopulationFromJSON,
    PopulationFromJSONTyped,
    PopulationToJSON,
} from './Population';
import {
    User,
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    guid?: string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    name?: string;
    /**
     * 
     * @type {Array<DeviceConfigurationProperty>}
     * @memberof Device
     */
    _configuration?: Array<DeviceConfigurationProperty>;
    /**
     * 
     * @type {Array<DeviceProperty>}
     * @memberof Device
     */
    properties?: Array<DeviceProperty>;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    ownerId?: string;
    /**
     * 
     * @type {User}
     * @memberof Device
     */
    owner?: User;
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    populationId?: number;
    /**
     * 
     * @type {Population}
     * @memberof Device
     */
    population?: Population;
    /**
     * 
     * @type {number}
     * @memberof Device
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Device
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Device
     */
    createdDate?: Date;
}

export function DeviceFromJSON(json: any): Device {
    return DeviceFromJSONTyped(json, false);
}

export function DeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Device {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'guid': !exists(json, 'guid') ? undefined : json['guid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        '_configuration': !exists(json, 'configuration') ? undefined : ((json['configuration'] as Array<any>).map(DeviceConfigurationPropertyFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : ((json['properties'] as Array<any>).map(DevicePropertyFromJSON)),
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'owner': !exists(json, 'owner') ? undefined : UserFromJSON(json['owner']),
        'populationId': !exists(json, 'populationId') ? undefined : json['populationId'],
        'population': !exists(json, 'population') ? undefined : PopulationFromJSON(json['population']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function DeviceToJSON(value?: Device | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'guid': value.guid,
        'name': value.name,
        'configuration': value._configuration === undefined ? undefined : ((value._configuration as Array<any>).map(DeviceConfigurationPropertyToJSON)),
        'properties': value.properties === undefined ? undefined : ((value.properties as Array<any>).map(DevicePropertyToJSON)),
        'ownerId': value.ownerId,
        'owner': UserToJSON(value.owner),
        'populationId': value.populationId,
        'population': PopulationToJSON(value.population),
        'id': value.id,
        'deleted': value.deleted,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

