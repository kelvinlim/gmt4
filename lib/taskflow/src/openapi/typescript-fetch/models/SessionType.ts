/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Population,
    PopulationFromJSON,
    PopulationFromJSONTyped,
    PopulationToJSON,
} from './Population';
import {
    SessionTypeMeasureType,
    SessionTypeMeasureTypeFromJSON,
    SessionTypeMeasureTypeFromJSONTyped,
    SessionTypeMeasureTypeToJSON,
} from './SessionTypeMeasureType';
import {
    StimulationType,
    StimulationTypeFromJSON,
    StimulationTypeFromJSONTyped,
    StimulationTypeToJSON,
} from './StimulationType';

/**
 * 
 * @export
 * @interface SessionType
 */
export interface SessionType {
    /**
     * 
     * @type {string}
     * @memberof SessionType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SessionType
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionType
     */
    ordinal?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionType
     */
    populationId?: number;
    /**
     * 
     * @type {Population}
     * @memberof SessionType
     */
    population?: Population;
    /**
     * 
     * @type {number}
     * @memberof SessionType
     */
    stimulationTypeId?: number;
    /**
     * 
     * @type {StimulationType}
     * @memberof SessionType
     */
    stimulationType?: StimulationType;
    /**
     * 
     * @type {Array<SessionTypeMeasureType>}
     * @memberof SessionType
     */
    sessionTypeMeasureTypes?: Array<SessionTypeMeasureType>;
    /**
     * 
     * @type {boolean}
     * @memberof SessionType
     */
    lock?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SessionType
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SessionType
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SessionType
     */
    createdDate?: Date;
}

export function SessionTypeFromJSON(json: any): SessionType {
    return SessionTypeFromJSONTyped(json, false);
}

export function SessionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'ordinal': !exists(json, 'ordinal') ? undefined : json['ordinal'],
        'populationId': !exists(json, 'populationId') ? undefined : json['populationId'],
        'population': !exists(json, 'population') ? undefined : PopulationFromJSON(json['population']),
        'stimulationTypeId': !exists(json, 'stimulationTypeId') ? undefined : json['stimulationTypeId'],
        'stimulationType': !exists(json, 'stimulationType') ? undefined : StimulationTypeFromJSON(json['stimulationType']),
        'sessionTypeMeasureTypes': !exists(json, 'sessionTypeMeasureTypes') ? undefined : ((json['sessionTypeMeasureTypes'] as Array<any>).map(SessionTypeMeasureTypeFromJSON)),
        'lock': !exists(json, 'lock') ? undefined : json['lock'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function SessionTypeToJSON(value?: SessionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'ordinal': value.ordinal,
        'populationId': value.populationId,
        'population': PopulationToJSON(value.population),
        'stimulationTypeId': value.stimulationTypeId,
        'stimulationType': StimulationTypeToJSON(value.stimulationType),
        'sessionTypeMeasureTypes': value.sessionTypeMeasureTypes === undefined ? undefined : ((value.sessionTypeMeasureTypes as Array<any>).map(SessionTypeMeasureTypeToJSON)),
        'lock': value.lock,
        'id': value.id,
        'deleted': value.deleted,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

