/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Population,
    PopulationFromJSON,
    PopulationFromJSONTyped,
    PopulationToJSON,
} from './Population';
import {
    StimulationInterventionType,
    StimulationInterventionTypeFromJSON,
    StimulationInterventionTypeFromJSONTyped,
    StimulationInterventionTypeToJSON,
} from './StimulationInterventionType';
import {
    StimulationMode,
    StimulationModeFromJSON,
    StimulationModeFromJSONTyped,
    StimulationModeToJSON,
} from './StimulationMode';
import {
    StimulationPolarity,
    StimulationPolarityFromJSON,
    StimulationPolarityFromJSONTyped,
    StimulationPolarityToJSON,
} from './StimulationPolarity';

/**
 * 
 * @export
 * @interface StimulationType
 */
export interface StimulationType {
    /**
     * 
     * @type {string}
     * @memberof StimulationType
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    rampupTime?: number;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    rampdownTime?: number;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    current?: number;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    duration?: number;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    delay?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StimulationType
     */
    lock?: boolean;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    populationId?: number;
    /**
     * 
     * @type {Population}
     * @memberof StimulationType
     */
    population?: Population;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    stimulationInterventionTypeId?: number;
    /**
     * 
     * @type {StimulationInterventionType}
     * @memberof StimulationType
     */
    stimulationInterventionType?: StimulationInterventionType;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    stimulationModeId?: number;
    /**
     * 
     * @type {StimulationMode}
     * @memberof StimulationType
     */
    stimulationMode?: StimulationMode;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    stimulationPolarityId?: number;
    /**
     * 
     * @type {StimulationPolarity}
     * @memberof StimulationType
     */
    stimulationPolarity?: StimulationPolarity;
    /**
     * 
     * @type {number}
     * @memberof StimulationType
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StimulationType
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof StimulationType
     */
    createdDate?: Date;
}

export function StimulationTypeFromJSON(json: any): StimulationType {
    return StimulationTypeFromJSONTyped(json, false);
}

export function StimulationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StimulationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'rampupTime': !exists(json, 'rampupTime') ? undefined : json['rampupTime'],
        'rampdownTime': !exists(json, 'rampdownTime') ? undefined : json['rampdownTime'],
        'current': !exists(json, 'current') ? undefined : json['current'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'delay': !exists(json, 'delay') ? undefined : json['delay'],
        'lock': !exists(json, 'lock') ? undefined : json['lock'],
        'populationId': !exists(json, 'populationId') ? undefined : json['populationId'],
        'population': !exists(json, 'population') ? undefined : PopulationFromJSON(json['population']),
        'stimulationInterventionTypeId': !exists(json, 'stimulationInterventionTypeId') ? undefined : json['stimulationInterventionTypeId'],
        'stimulationInterventionType': !exists(json, 'stimulationInterventionType') ? undefined : StimulationInterventionTypeFromJSON(json['stimulationInterventionType']),
        'stimulationModeId': !exists(json, 'stimulationModeId') ? undefined : json['stimulationModeId'],
        'stimulationMode': !exists(json, 'stimulationMode') ? undefined : StimulationModeFromJSON(json['stimulationMode']),
        'stimulationPolarityId': !exists(json, 'stimulationPolarityId') ? undefined : json['stimulationPolarityId'],
        'stimulationPolarity': !exists(json, 'stimulationPolarity') ? undefined : StimulationPolarityFromJSON(json['stimulationPolarity']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function StimulationTypeToJSON(value?: StimulationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'rampupTime': value.rampupTime,
        'rampdownTime': value.rampdownTime,
        'current': value.current,
        'duration': value.duration,
        'delay': value.delay,
        'lock': value.lock,
        'populationId': value.populationId,
        'population': PopulationToJSON(value.population),
        'stimulationInterventionTypeId': value.stimulationInterventionTypeId,
        'stimulationInterventionType': StimulationInterventionTypeToJSON(value.stimulationInterventionType),
        'stimulationModeId': value.stimulationModeId,
        'stimulationMode': StimulationModeToJSON(value.stimulationMode),
        'stimulationPolarityId': value.stimulationPolarityId,
        'stimulationPolarity': StimulationPolarityToJSON(value.stimulationPolarity),
        'id': value.id,
        'deleted': value.deleted,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

