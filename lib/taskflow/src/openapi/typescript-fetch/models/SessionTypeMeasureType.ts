/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MeasureType,
    MeasureTypeFromJSON,
    MeasureTypeFromJSONTyped,
    MeasureTypeToJSON,
} from './MeasureType';
import {
    SessionType,
    SessionTypeFromJSON,
    SessionTypeFromJSONTyped,
    SessionTypeToJSON,
} from './SessionType';

/**
 * 
 * @export
 * @interface SessionTypeMeasureType
 */
export interface SessionTypeMeasureType {
    /**
     * 
     * @type {boolean}
     * @memberof SessionTypeMeasureType
     */
    trigger?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SessionTypeMeasureType
     */
    ordinal?: number;
    /**
     * 
     * @type {number}
     * @memberof SessionTypeMeasureType
     */
    measureTypeId?: number;
    /**
     * 
     * @type {MeasureType}
     * @memberof SessionTypeMeasureType
     */
    measureType?: MeasureType;
    /**
     * 
     * @type {number}
     * @memberof SessionTypeMeasureType
     */
    sessionTypeId?: number;
    /**
     * 
     * @type {SessionType}
     * @memberof SessionTypeMeasureType
     */
    sessionType?: SessionType;
    /**
     * 
     * @type {boolean}
     * @memberof SessionTypeMeasureType
     */
    lock?: boolean;
    /**
     * 
     * @type {number}
     * @memberof SessionTypeMeasureType
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SessionTypeMeasureType
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SessionTypeMeasureType
     */
    createdDate?: Date;
}

export function SessionTypeMeasureTypeFromJSON(json: any): SessionTypeMeasureType {
    return SessionTypeMeasureTypeFromJSONTyped(json, false);
}

export function SessionTypeMeasureTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SessionTypeMeasureType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trigger': !exists(json, 'trigger') ? undefined : json['trigger'],
        'ordinal': !exists(json, 'ordinal') ? undefined : json['ordinal'],
        'measureTypeId': !exists(json, 'measureTypeId') ? undefined : json['measureTypeId'],
        'measureType': !exists(json, 'measureType') ? undefined : MeasureTypeFromJSON(json['measureType']),
        'sessionTypeId': !exists(json, 'sessionTypeId') ? undefined : json['sessionTypeId'],
        'sessionType': !exists(json, 'sessionType') ? undefined : SessionTypeFromJSON(json['sessionType']),
        'lock': !exists(json, 'lock') ? undefined : json['lock'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function SessionTypeMeasureTypeToJSON(value?: SessionTypeMeasureType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trigger': value.trigger,
        'ordinal': value.ordinal,
        'measureTypeId': value.measureTypeId,
        'measureType': MeasureTypeToJSON(value.measureType),
        'sessionTypeId': value.sessionTypeId,
        'sessionType': SessionTypeToJSON(value.sessionType),
        'lock': value.lock,
        'id': value.id,
        'deleted': value.deleted,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

