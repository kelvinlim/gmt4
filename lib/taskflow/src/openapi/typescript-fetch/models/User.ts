/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConfigurationProperty,
    ConfigurationPropertyFromJSON,
    ConfigurationPropertyFromJSONTyped,
    ConfigurationPropertyToJSON,
} from './ConfigurationProperty';
import {
    Connection,
    ConnectionFromJSON,
    ConnectionFromJSONTyped,
    ConnectionToJSON,
} from './Connection';
import {
    Session,
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
} from './Session';
import {
    UserProperty,
    UserPropertyFromJSON,
    UserPropertyFromJSONTyped,
    UserPropertyToJSON,
} from './UserProperty';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    readonly fullName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    zoomURL?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    birthdate?: Date;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    streetAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    zip?: string;
    /**
     * 
     * @type {Array<Session>}
     * @memberof User
     */
    administratedSessions?: Array<Session>;
    /**
     * 
     * @type {Array<ConfigurationProperty>}
     * @memberof User
     */
    _configuration?: Array<ConfigurationProperty>;
    /**
     * 
     * @type {Array<Connection>}
     * @memberof User
     */
    connections?: Array<Connection>;
    /**
     * 
     * @type {Array<UserProperty>}
     * @memberof User
     */
    properties?: Array<UserProperty>;
    /**
     * 
     * @type {Array<Session>}
     * @memberof User
     */
    sessions?: Array<Session>;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    deleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    normalizedUserName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    normalizedEmail?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    emailConfirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    passwordHash?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    securityStamp?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    concurrencyStamp?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phoneNumber?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    phoneNumberConfirmed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    twoFactorEnabled?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    lockoutEnd?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    lockoutEnabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    accessFailedCount?: number;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'middleName': !exists(json, 'middleName') ? undefined : json['middleName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'fullName': !exists(json, 'fullName') ? undefined : json['fullName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'zoomURL': !exists(json, 'zoomURL') ? undefined : json['zoomURL'],
        'birthdate': !exists(json, 'birthdate') ? undefined : (new Date(json['birthdate'])),
        'streetAddress': !exists(json, 'streetAddress') ? undefined : json['streetAddress'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'zip': !exists(json, 'zip') ? undefined : json['zip'],
        'administratedSessions': !exists(json, 'administratedSessions') ? undefined : ((json['administratedSessions'] as Array<any>).map(SessionFromJSON)),
        '_configuration': !exists(json, 'configuration') ? undefined : ((json['configuration'] as Array<any>).map(ConfigurationPropertyFromJSON)),
        'connections': !exists(json, 'connections') ? undefined : ((json['connections'] as Array<any>).map(ConnectionFromJSON)),
        'properties': !exists(json, 'properties') ? undefined : ((json['properties'] as Array<any>).map(UserPropertyFromJSON)),
        'sessions': !exists(json, 'sessions') ? undefined : ((json['sessions'] as Array<any>).map(SessionFromJSON)),
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'normalizedUserName': !exists(json, 'normalizedUserName') ? undefined : json['normalizedUserName'],
        'normalizedEmail': !exists(json, 'normalizedEmail') ? undefined : json['normalizedEmail'],
        'emailConfirmed': !exists(json, 'emailConfirmed') ? undefined : json['emailConfirmed'],
        'passwordHash': !exists(json, 'passwordHash') ? undefined : json['passwordHash'],
        'securityStamp': !exists(json, 'securityStamp') ? undefined : json['securityStamp'],
        'concurrencyStamp': !exists(json, 'concurrencyStamp') ? undefined : json['concurrencyStamp'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
        'phoneNumberConfirmed': !exists(json, 'phoneNumberConfirmed') ? undefined : json['phoneNumberConfirmed'],
        'twoFactorEnabled': !exists(json, 'twoFactorEnabled') ? undefined : json['twoFactorEnabled'],
        'lockoutEnd': !exists(json, 'lockoutEnd') ? undefined : (new Date(json['lockoutEnd'])),
        'lockoutEnabled': !exists(json, 'lockoutEnabled') ? undefined : json['lockoutEnabled'],
        'accessFailedCount': !exists(json, 'accessFailedCount') ? undefined : json['accessFailedCount'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'firstName': value.firstName,
        'middleName': value.middleName,
        'lastName': value.lastName,
        'email': value.email,
        'zoomURL': value.zoomURL,
        'birthdate': value.birthdate === undefined ? undefined : (value.birthdate.toISOString()),
        'streetAddress': value.streetAddress,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'administratedSessions': value.administratedSessions === undefined ? undefined : ((value.administratedSessions as Array<any>).map(SessionToJSON)),
        'configuration': value._configuration === undefined ? undefined : ((value._configuration as Array<any>).map(ConfigurationPropertyToJSON)),
        'connections': value.connections === undefined ? undefined : ((value.connections as Array<any>).map(ConnectionToJSON)),
        'properties': value.properties === undefined ? undefined : ((value.properties as Array<any>).map(UserPropertyToJSON)),
        'sessions': value.sessions === undefined ? undefined : ((value.sessions as Array<any>).map(SessionToJSON)),
        'deleted': value.deleted,
        'id': value.id,
        'userName': value.userName,
        'normalizedUserName': value.normalizedUserName,
        'normalizedEmail': value.normalizedEmail,
        'emailConfirmed': value.emailConfirmed,
        'passwordHash': value.passwordHash,
        'securityStamp': value.securityStamp,
        'concurrencyStamp': value.concurrencyStamp,
        'phoneNumber': value.phoneNumber,
        'phoneNumberConfirmed': value.phoneNumberConfirmed,
        'twoFactorEnabled': value.twoFactorEnabled,
        'lockoutEnd': value.lockoutEnd === undefined ? undefined : (value.lockoutEnd.toISOString()),
        'lockoutEnabled': value.lockoutEnabled,
        'accessFailedCount': value.accessFailedCount,
    };
}

