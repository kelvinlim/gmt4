/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Measure,
    MeasureFromJSON,
    MeasureFromJSONTyped,
    MeasureToJSON,
} from './Measure';
import {
    MeasureType,
    MeasureTypeFromJSON,
    MeasureTypeFromJSONTyped,
    MeasureTypeToJSON,
} from './MeasureType';
import {
    Session,
    SessionFromJSON,
    SessionFromJSONTyped,
    SessionToJSON,
} from './Session';
import {
    SessionType,
    SessionTypeFromJSON,
    SessionTypeFromJSONTyped,
    SessionTypeToJSON,
} from './SessionType';

/**
 * 
 * @export
 * @interface Population
 */
export interface Population {
    /**
     * 
     * @type {string}
     * @memberof Population
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Population
     */
    description?: string;
    /**
     * 
     * @type {Array<Measure>}
     * @memberof Population
     */
    measures?: Array<Measure>;
    /**
     * 
     * @type {Array<MeasureType>}
     * @memberof Population
     */
    measureTypes?: Array<MeasureType>;
    /**
     * 
     * @type {Array<Session>}
     * @memberof Population
     */
    sessions?: Array<Session>;
    /**
     * 
     * @type {Array<SessionType>}
     * @memberof Population
     */
    sessionTypes?: Array<SessionType>;
    /**
     * 
     * @type {number}
     * @memberof Population
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Population
     */
    deleted?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Population
     */
    createdDate?: Date;
}

export function PopulationFromJSON(json: any): Population {
    return PopulationFromJSONTyped(json, false);
}

export function PopulationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Population {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'measures': !exists(json, 'measures') ? undefined : ((json['measures'] as Array<any>).map(MeasureFromJSON)),
        'measureTypes': !exists(json, 'measureTypes') ? undefined : ((json['measureTypes'] as Array<any>).map(MeasureTypeFromJSON)),
        'sessions': !exists(json, 'sessions') ? undefined : ((json['sessions'] as Array<any>).map(SessionFromJSON)),
        'sessionTypes': !exists(json, 'sessionTypes') ? undefined : ((json['sessionTypes'] as Array<any>).map(SessionTypeFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'createdDate': !exists(json, 'createdDate') ? undefined : (new Date(json['createdDate'])),
    };
}

export function PopulationToJSON(value?: Population | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'measures': value.measures === undefined ? undefined : ((value.measures as Array<any>).map(MeasureToJSON)),
        'measureTypes': value.measureTypes === undefined ? undefined : ((value.measureTypes as Array<any>).map(MeasureTypeToJSON)),
        'sessions': value.sessions === undefined ? undefined : ((value.sessions as Array<any>).map(SessionToJSON)),
        'sessionTypes': value.sessionTypes === undefined ? undefined : ((value.sessionTypes as Array<any>).map(SessionTypeToJSON)),
        'id': value.id,
        'deleted': value.deleted,
        'createdDate': value.createdDate === undefined ? undefined : (value.createdDate.toISOString()),
    };
}

