/* tslint:disable */
/* eslint-disable */
/**
 * TaskFlow API
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeviceConfigurationProperty,
    DeviceConfigurationPropertyFromJSON,
    DeviceConfigurationPropertyToJSON,
} from '../models';

export interface DeleteRequest {
    id: number;
    populationId: string;
    deviceGuid: string;
}

export interface GetRequest {
    deviceGuid: string;
    populationId: string;
}

export interface GetDeviceConfigurationPropertyRequest {
    id: number;
    populationId: string;
    deviceGuid: string;
}

export interface PostRequest {
    populationId: string;
    deviceGuid: string;
    property?: DeviceConfigurationProperty;
}

export interface PutRequest {
    id: number;
    populationId: string;
    deviceGuid: string;
    property?: DeviceConfigurationProperty;
}

/**
 * 
 */
export class DeviceConfigurationApi extends runtime.BaseAPI {

    /**
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _delete.');
        }

        if (requestParameters.populationId === null || requestParameters.populationId === undefined) {
            throw new runtime.RequiredError('populationId','Required parameter requestParameters.populationId was null or undefined when calling _delete.');
        }

        if (requestParameters.deviceGuid === null || requestParameters.deviceGuid === undefined) {
            throw new runtime.RequiredError('deviceGuid','Required parameter requestParameters.deviceGuid was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/populations/{populationId}/devices/{deviceGuid}/configuration/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"populationId"}}`, encodeURIComponent(String(requestParameters.populationId))).replace(`{${"deviceGuid"}}`, encodeURIComponent(String(requestParameters.deviceGuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this._deleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getRaw(requestParameters: GetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DeviceConfigurationProperty>>> {
        if (requestParameters.deviceGuid === null || requestParameters.deviceGuid === undefined) {
            throw new runtime.RequiredError('deviceGuid','Required parameter requestParameters.deviceGuid was null or undefined when calling get.');
        }

        if (requestParameters.populationId === null || requestParameters.populationId === undefined) {
            throw new runtime.RequiredError('populationId','Required parameter requestParameters.populationId was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/populations/{populationId}/devices/{deviceGuid}/configuration`.replace(`{${"deviceGuid"}}`, encodeURIComponent(String(requestParameters.deviceGuid))).replace(`{${"populationId"}}`, encodeURIComponent(String(requestParameters.populationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeviceConfigurationPropertyFromJSON));
    }

    /**
     */
    async get(requestParameters: GetRequest, initOverrides?: RequestInit): Promise<Array<DeviceConfigurationProperty>> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getDeviceConfigurationPropertyRaw(requestParameters: GetDeviceConfigurationPropertyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<DeviceConfigurationProperty>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeviceConfigurationProperty.');
        }

        if (requestParameters.populationId === null || requestParameters.populationId === undefined) {
            throw new runtime.RequiredError('populationId','Required parameter requestParameters.populationId was null or undefined when calling getDeviceConfigurationProperty.');
        }

        if (requestParameters.deviceGuid === null || requestParameters.deviceGuid === undefined) {
            throw new runtime.RequiredError('deviceGuid','Required parameter requestParameters.deviceGuid was null or undefined when calling getDeviceConfigurationProperty.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/populations/{populationId}/devices/{deviceGuid}/configuration/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"populationId"}}`, encodeURIComponent(String(requestParameters.populationId))).replace(`{${"deviceGuid"}}`, encodeURIComponent(String(requestParameters.deviceGuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceConfigurationPropertyFromJSON(jsonValue));
    }

    /**
     */
    async getDeviceConfigurationProperty(requestParameters: GetDeviceConfigurationPropertyRequest, initOverrides?: RequestInit): Promise<DeviceConfigurationProperty> {
        const response = await this.getDeviceConfigurationPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postRaw(requestParameters: PostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.populationId === null || requestParameters.populationId === undefined) {
            throw new runtime.RequiredError('populationId','Required parameter requestParameters.populationId was null or undefined when calling post.');
        }

        if (requestParameters.deviceGuid === null || requestParameters.deviceGuid === undefined) {
            throw new runtime.RequiredError('deviceGuid','Required parameter requestParameters.deviceGuid was null or undefined when calling post.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/v2.0/populations/{populationId}/devices/{deviceGuid}/configuration`.replace(`{${"populationId"}}`, encodeURIComponent(String(requestParameters.populationId))).replace(`{${"deviceGuid"}}`, encodeURIComponent(String(requestParameters.deviceGuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceConfigurationPropertyToJSON(requestParameters.property),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async post(requestParameters: PostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putRaw(requestParameters: PutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling put.');
        }

        if (requestParameters.populationId === null || requestParameters.populationId === undefined) {
            throw new runtime.RequiredError('populationId','Required parameter requestParameters.populationId was null or undefined when calling put.');
        }

        if (requestParameters.deviceGuid === null || requestParameters.deviceGuid === undefined) {
            throw new runtime.RequiredError('deviceGuid','Required parameter requestParameters.deviceGuid was null or undefined when calling put.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/v2.0/populations/{populationId}/devices/{deviceGuid}/configuration/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"populationId"}}`, encodeURIComponent(String(requestParameters.populationId))).replace(`{${"deviceGuid"}}`, encodeURIComponent(String(requestParameters.deviceGuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceConfigurationPropertyToJSON(requestParameters.property),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async put(requestParameters: PutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.putRaw(requestParameters, initOverrides);
    }

}
