/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Notification
    /// </summary>
    [DataContract(Name = "Notification")]
    public partial class Notification : IEquatable<Notification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Notification" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="body">body.</param>
        /// <param name="scheduledTime">scheduledTime.</param>
        /// <param name="notificationTypeId">notificationTypeId.</param>
        /// <param name="notificationType">notificationType.</param>
        /// <param name="notificationScheduleTypeId">notificationScheduleTypeId.</param>
        /// <param name="notificationScheduleType">notificationScheduleType.</param>
        /// <param name="populationId">populationId.</param>
        /// <param name="population">population.</param>
        /// <param name="logs">logs.</param>
        /// <param name="recipients">recipients.</param>
        /// <param name="id">id.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="createdDate">createdDate.</param>
        public Notification(string title = default(string), string body = default(string), DateTime scheduledTime = default(DateTime), int notificationTypeId = default(int), NotificationType notificationType = default(NotificationType), int notificationScheduleTypeId = default(int), NotificationScheduleType notificationScheduleType = default(NotificationScheduleType), int populationId = default(int), Population population = default(Population), List<NotificationLog> logs = default(List<NotificationLog>), List<NotificationRecipient> recipients = default(List<NotificationRecipient>), int id = default(int), bool deleted = default(bool), DateTime createdDate = default(DateTime))
        {
            this.Title = title;
            this.Body = body;
            this.ScheduledTime = scheduledTime;
            this.NotificationTypeId = notificationTypeId;
            this.NotificationType = notificationType;
            this.NotificationScheduleTypeId = notificationScheduleTypeId;
            this.NotificationScheduleType = notificationScheduleType;
            this.PopulationId = populationId;
            this.Population = population;
            this.Logs = logs;
            this.Recipients = recipients;
            this.Id = id;
            this.Deleted = deleted;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public string Body { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledTime
        /// </summary>
        [DataMember(Name = "scheduledTime", EmitDefaultValue = false)]
        public DateTime ScheduledTime { get; set; }

        /// <summary>
        /// Gets or Sets NotificationTypeId
        /// </summary>
        [DataMember(Name = "notificationTypeId", EmitDefaultValue = false)]
        public int NotificationTypeId { get; set; }

        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name = "notificationType", EmitDefaultValue = false)]
        public NotificationType NotificationType { get; set; }

        /// <summary>
        /// Gets or Sets NotificationScheduleTypeId
        /// </summary>
        [DataMember(Name = "notificationScheduleTypeId", EmitDefaultValue = false)]
        public int NotificationScheduleTypeId { get; set; }

        /// <summary>
        /// Gets or Sets NotificationScheduleType
        /// </summary>
        [DataMember(Name = "notificationScheduleType", EmitDefaultValue = false)]
        public NotificationScheduleType NotificationScheduleType { get; set; }

        /// <summary>
        /// Gets or Sets PopulationId
        /// </summary>
        [DataMember(Name = "populationId", EmitDefaultValue = false)]
        public int PopulationId { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name = "population", EmitDefaultValue = false)]
        public Population Population { get; set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [DataMember(Name = "logs", EmitDefaultValue = false)]
        public List<NotificationLog> Logs { get; set; }

        /// <summary>
        /// Gets or Sets Recipients
        /// </summary>
        [DataMember(Name = "recipients", EmitDefaultValue = false)]
        public List<NotificationRecipient> Recipients { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Notification {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  ScheduledTime: ").Append(ScheduledTime).Append("\n");
            sb.Append("  NotificationTypeId: ").Append(NotificationTypeId).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  NotificationScheduleTypeId: ").Append(NotificationScheduleTypeId).Append("\n");
            sb.Append("  NotificationScheduleType: ").Append(NotificationScheduleType).Append("\n");
            sb.Append("  PopulationId: ").Append(PopulationId).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Recipients: ").Append(Recipients).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notification);
        }

        /// <summary>
        /// Returns true if Notification instances are equal
        /// </summary>
        /// <param name="input">Instance of Notification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.ScheduledTime == input.ScheduledTime ||
                    (this.ScheduledTime != null &&
                    this.ScheduledTime.Equals(input.ScheduledTime))
                ) && 
                (
                    this.NotificationTypeId == input.NotificationTypeId ||
                    this.NotificationTypeId.Equals(input.NotificationTypeId)
                ) && 
                (
                    this.NotificationType == input.NotificationType ||
                    (this.NotificationType != null &&
                    this.NotificationType.Equals(input.NotificationType))
                ) && 
                (
                    this.NotificationScheduleTypeId == input.NotificationScheduleTypeId ||
                    this.NotificationScheduleTypeId.Equals(input.NotificationScheduleTypeId)
                ) && 
                (
                    this.NotificationScheduleType == input.NotificationScheduleType ||
                    (this.NotificationScheduleType != null &&
                    this.NotificationScheduleType.Equals(input.NotificationScheduleType))
                ) && 
                (
                    this.PopulationId == input.PopulationId ||
                    this.PopulationId.Equals(input.PopulationId)
                ) && 
                (
                    this.Population == input.Population ||
                    (this.Population != null &&
                    this.Population.Equals(input.Population))
                ) && 
                (
                    this.Logs == input.Logs ||
                    this.Logs != null &&
                    input.Logs != null &&
                    this.Logs.SequenceEqual(input.Logs)
                ) && 
                (
                    this.Recipients == input.Recipients ||
                    this.Recipients != null &&
                    input.Recipients != null &&
                    this.Recipients.SequenceEqual(input.Recipients)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.ScheduledTime != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduledTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotificationTypeId.GetHashCode();
                if (this.NotificationType != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotificationScheduleTypeId.GetHashCode();
                if (this.NotificationScheduleType != null)
                {
                    hashCode = (hashCode * 59) + this.NotificationScheduleType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PopulationId.GetHashCode();
                if (this.Population != null)
                {
                    hashCode = (hashCode * 59) + this.Population.GetHashCode();
                }
                if (this.Logs != null)
                {
                    hashCode = (hashCode * 59) + this.Logs.GetHashCode();
                }
                if (this.Recipients != null)
                {
                    hashCode = (hashCode * 59) + this.Recipients.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
