/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SessionDTO
    /// </summary>
    [DataContract(Name = "SessionDTO")]
    public partial class SessionDTO : IEquatable<SessionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionDTO" /> class.
        /// </summary>
        /// <param name="start">start.</param>
        /// <param name="administratorId">administratorId.</param>
        /// <param name="sessionStatusId">sessionStatusId.</param>
        /// <param name="sessionTypeId">sessionTypeId.</param>
        /// <param name="subjectId">subjectId.</param>
        public SessionDTO(DateTime start = default(DateTime), string administratorId = default(string), int sessionStatusId = default(int), int sessionTypeId = default(int), string subjectId = default(string))
        {
            this.Start = start;
            this.AdministratorId = administratorId;
            this.SessionStatusId = sessionStatusId;
            this.SessionTypeId = sessionTypeId;
            this.SubjectId = subjectId;
        }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Gets or Sets AdministratorId
        /// </summary>
        [DataMember(Name = "administratorId", EmitDefaultValue = false)]
        public string AdministratorId { get; set; }

        /// <summary>
        /// Gets or Sets SessionStatusId
        /// </summary>
        [DataMember(Name = "sessionStatusId", EmitDefaultValue = false)]
        public int SessionStatusId { get; set; }

        /// <summary>
        /// Gets or Sets SessionTypeId
        /// </summary>
        [DataMember(Name = "sessionTypeId", EmitDefaultValue = false)]
        public int SessionTypeId { get; set; }

        /// <summary>
        /// Gets or Sets SubjectId
        /// </summary>
        [DataMember(Name = "subjectId", EmitDefaultValue = false)]
        public string SubjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionDTO {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  AdministratorId: ").Append(AdministratorId).Append("\n");
            sb.Append("  SessionStatusId: ").Append(SessionStatusId).Append("\n");
            sb.Append("  SessionTypeId: ").Append(SessionTypeId).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionDTO);
        }

        /// <summary>
        /// Returns true if SessionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.AdministratorId == input.AdministratorId ||
                    (this.AdministratorId != null &&
                    this.AdministratorId.Equals(input.AdministratorId))
                ) && 
                (
                    this.SessionStatusId == input.SessionStatusId ||
                    this.SessionStatusId.Equals(input.SessionStatusId)
                ) && 
                (
                    this.SessionTypeId == input.SessionTypeId ||
                    this.SessionTypeId.Equals(input.SessionTypeId)
                ) && 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.AdministratorId != null)
                {
                    hashCode = (hashCode * 59) + this.AdministratorId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SessionStatusId.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionTypeId.GetHashCode();
                if (this.SubjectId != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
