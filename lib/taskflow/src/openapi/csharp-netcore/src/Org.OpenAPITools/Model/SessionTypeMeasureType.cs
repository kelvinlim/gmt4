/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SessionTypeMeasureType
    /// </summary>
    [DataContract(Name = "SessionTypeMeasureType")]
    public partial class SessionTypeMeasureType : IEquatable<SessionTypeMeasureType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionTypeMeasureType" /> class.
        /// </summary>
        /// <param name="trigger">trigger.</param>
        /// <param name="ordinal">ordinal.</param>
        /// <param name="measureTypeId">measureTypeId.</param>
        /// <param name="measureType">measureType.</param>
        /// <param name="sessionTypeId">sessionTypeId.</param>
        /// <param name="sessionType">sessionType.</param>
        /// <param name="_lock">_lock.</param>
        /// <param name="id">id.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="createdDate">createdDate.</param>
        public SessionTypeMeasureType(bool trigger = default(bool), int ordinal = default(int), int measureTypeId = default(int), MeasureType measureType = default(MeasureType), int sessionTypeId = default(int), SessionType sessionType = default(SessionType), bool _lock = default(bool), int id = default(int), bool deleted = default(bool), DateTime createdDate = default(DateTime))
        {
            this.Trigger = trigger;
            this.Ordinal = ordinal;
            this.MeasureTypeId = measureTypeId;
            this.MeasureType = measureType;
            this.SessionTypeId = sessionTypeId;
            this.SessionType = sessionType;
            this.Lock = _lock;
            this.Id = id;
            this.Deleted = deleted;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [DataMember(Name = "trigger", EmitDefaultValue = true)]
        public bool Trigger { get; set; }

        /// <summary>
        /// Gets or Sets Ordinal
        /// </summary>
        [DataMember(Name = "ordinal", EmitDefaultValue = false)]
        public int Ordinal { get; set; }

        /// <summary>
        /// Gets or Sets MeasureTypeId
        /// </summary>
        [DataMember(Name = "measureTypeId", EmitDefaultValue = false)]
        public int MeasureTypeId { get; set; }

        /// <summary>
        /// Gets or Sets MeasureType
        /// </summary>
        [DataMember(Name = "measureType", EmitDefaultValue = false)]
        public MeasureType MeasureType { get; set; }

        /// <summary>
        /// Gets or Sets SessionTypeId
        /// </summary>
        [DataMember(Name = "sessionTypeId", EmitDefaultValue = false)]
        public int SessionTypeId { get; set; }

        /// <summary>
        /// Gets or Sets SessionType
        /// </summary>
        [DataMember(Name = "sessionType", EmitDefaultValue = false)]
        public SessionType SessionType { get; set; }

        /// <summary>
        /// Gets or Sets Lock
        /// </summary>
        [DataMember(Name = "lock", EmitDefaultValue = true)]
        public bool Lock { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionTypeMeasureType {\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("  MeasureTypeId: ").Append(MeasureTypeId).Append("\n");
            sb.Append("  MeasureType: ").Append(MeasureType).Append("\n");
            sb.Append("  SessionTypeId: ").Append(SessionTypeId).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  Lock: ").Append(Lock).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionTypeMeasureType);
        }

        /// <summary>
        /// Returns true if SessionTypeMeasureType instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionTypeMeasureType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionTypeMeasureType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Trigger == input.Trigger ||
                    this.Trigger.Equals(input.Trigger)
                ) && 
                (
                    this.Ordinal == input.Ordinal ||
                    this.Ordinal.Equals(input.Ordinal)
                ) && 
                (
                    this.MeasureTypeId == input.MeasureTypeId ||
                    this.MeasureTypeId.Equals(input.MeasureTypeId)
                ) && 
                (
                    this.MeasureType == input.MeasureType ||
                    (this.MeasureType != null &&
                    this.MeasureType.Equals(input.MeasureType))
                ) && 
                (
                    this.SessionTypeId == input.SessionTypeId ||
                    this.SessionTypeId.Equals(input.SessionTypeId)
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    (this.SessionType != null &&
                    this.SessionType.Equals(input.SessionType))
                ) && 
                (
                    this.Lock == input.Lock ||
                    this.Lock.Equals(input.Lock)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Trigger.GetHashCode();
                hashCode = (hashCode * 59) + this.Ordinal.GetHashCode();
                hashCode = (hashCode * 59) + this.MeasureTypeId.GetHashCode();
                if (this.MeasureType != null)
                {
                    hashCode = (hashCode * 59) + this.MeasureType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SessionTypeId.GetHashCode();
                if (this.SessionType != null)
                {
                    hashCode = (hashCode * 59) + this.SessionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Lock.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
