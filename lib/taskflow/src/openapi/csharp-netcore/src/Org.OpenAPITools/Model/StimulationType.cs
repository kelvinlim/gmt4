/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// StimulationType
    /// </summary>
    [DataContract(Name = "StimulationType")]
    public partial class StimulationType : IEquatable<StimulationType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StimulationType" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="rampupTime">rampupTime.</param>
        /// <param name="rampdownTime">rampdownTime.</param>
        /// <param name="current">current.</param>
        /// <param name="duration">duration.</param>
        /// <param name="delay">delay.</param>
        /// <param name="_lock">_lock.</param>
        /// <param name="populationId">populationId.</param>
        /// <param name="population">population.</param>
        /// <param name="stimulationInterventionTypeId">stimulationInterventionTypeId.</param>
        /// <param name="stimulationInterventionType">stimulationInterventionType.</param>
        /// <param name="stimulationModeId">stimulationModeId.</param>
        /// <param name="stimulationMode">stimulationMode.</param>
        /// <param name="stimulationPolarityId">stimulationPolarityId.</param>
        /// <param name="stimulationPolarity">stimulationPolarity.</param>
        /// <param name="id">id.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="createdDate">createdDate.</param>
        public StimulationType(string name = default(string), int rampupTime = default(int), int rampdownTime = default(int), int current = default(int), int duration = default(int), int delay = default(int), bool _lock = default(bool), int populationId = default(int), Population population = default(Population), int stimulationInterventionTypeId = default(int), StimulationInterventionType stimulationInterventionType = default(StimulationInterventionType), int stimulationModeId = default(int), StimulationMode stimulationMode = default(StimulationMode), int stimulationPolarityId = default(int), StimulationPolarity stimulationPolarity = default(StimulationPolarity), int id = default(int), bool deleted = default(bool), DateTime createdDate = default(DateTime))
        {
            this.Name = name;
            this.RampupTime = rampupTime;
            this.RampdownTime = rampdownTime;
            this.Current = current;
            this.Duration = duration;
            this.Delay = delay;
            this.Lock = _lock;
            this.PopulationId = populationId;
            this.Population = population;
            this.StimulationInterventionTypeId = stimulationInterventionTypeId;
            this.StimulationInterventionType = stimulationInterventionType;
            this.StimulationModeId = stimulationModeId;
            this.StimulationMode = stimulationMode;
            this.StimulationPolarityId = stimulationPolarityId;
            this.StimulationPolarity = stimulationPolarity;
            this.Id = id;
            this.Deleted = deleted;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RampupTime
        /// </summary>
        [DataMember(Name = "rampupTime", EmitDefaultValue = false)]
        public int RampupTime { get; set; }

        /// <summary>
        /// Gets or Sets RampdownTime
        /// </summary>
        [DataMember(Name = "rampdownTime", EmitDefaultValue = false)]
        public int RampdownTime { get; set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", EmitDefaultValue = false)]
        public int Current { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets Delay
        /// </summary>
        [DataMember(Name = "delay", EmitDefaultValue = false)]
        public int Delay { get; set; }

        /// <summary>
        /// Gets or Sets Lock
        /// </summary>
        [DataMember(Name = "lock", EmitDefaultValue = true)]
        public bool Lock { get; set; }

        /// <summary>
        /// Gets or Sets PopulationId
        /// </summary>
        [DataMember(Name = "populationId", EmitDefaultValue = false)]
        public int PopulationId { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name = "population", EmitDefaultValue = false)]
        public Population Population { get; set; }

        /// <summary>
        /// Gets or Sets StimulationInterventionTypeId
        /// </summary>
        [DataMember(Name = "stimulationInterventionTypeId", EmitDefaultValue = false)]
        public int StimulationInterventionTypeId { get; set; }

        /// <summary>
        /// Gets or Sets StimulationInterventionType
        /// </summary>
        [DataMember(Name = "stimulationInterventionType", EmitDefaultValue = false)]
        public StimulationInterventionType StimulationInterventionType { get; set; }

        /// <summary>
        /// Gets or Sets StimulationModeId
        /// </summary>
        [DataMember(Name = "stimulationModeId", EmitDefaultValue = false)]
        public int StimulationModeId { get; set; }

        /// <summary>
        /// Gets or Sets StimulationMode
        /// </summary>
        [DataMember(Name = "stimulationMode", EmitDefaultValue = false)]
        public StimulationMode StimulationMode { get; set; }

        /// <summary>
        /// Gets or Sets StimulationPolarityId
        /// </summary>
        [DataMember(Name = "stimulationPolarityId", EmitDefaultValue = false)]
        public int StimulationPolarityId { get; set; }

        /// <summary>
        /// Gets or Sets StimulationPolarity
        /// </summary>
        [DataMember(Name = "stimulationPolarity", EmitDefaultValue = false)]
        public StimulationPolarity StimulationPolarity { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StimulationType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RampupTime: ").Append(RampupTime).Append("\n");
            sb.Append("  RampdownTime: ").Append(RampdownTime).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  Lock: ").Append(Lock).Append("\n");
            sb.Append("  PopulationId: ").Append(PopulationId).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("  StimulationInterventionTypeId: ").Append(StimulationInterventionTypeId).Append("\n");
            sb.Append("  StimulationInterventionType: ").Append(StimulationInterventionType).Append("\n");
            sb.Append("  StimulationModeId: ").Append(StimulationModeId).Append("\n");
            sb.Append("  StimulationMode: ").Append(StimulationMode).Append("\n");
            sb.Append("  StimulationPolarityId: ").Append(StimulationPolarityId).Append("\n");
            sb.Append("  StimulationPolarity: ").Append(StimulationPolarity).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StimulationType);
        }

        /// <summary>
        /// Returns true if StimulationType instances are equal
        /// </summary>
        /// <param name="input">Instance of StimulationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StimulationType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RampupTime == input.RampupTime ||
                    this.RampupTime.Equals(input.RampupTime)
                ) && 
                (
                    this.RampdownTime == input.RampdownTime ||
                    this.RampdownTime.Equals(input.RampdownTime)
                ) && 
                (
                    this.Current == input.Current ||
                    this.Current.Equals(input.Current)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Delay == input.Delay ||
                    this.Delay.Equals(input.Delay)
                ) && 
                (
                    this.Lock == input.Lock ||
                    this.Lock.Equals(input.Lock)
                ) && 
                (
                    this.PopulationId == input.PopulationId ||
                    this.PopulationId.Equals(input.PopulationId)
                ) && 
                (
                    this.Population == input.Population ||
                    (this.Population != null &&
                    this.Population.Equals(input.Population))
                ) && 
                (
                    this.StimulationInterventionTypeId == input.StimulationInterventionTypeId ||
                    this.StimulationInterventionTypeId.Equals(input.StimulationInterventionTypeId)
                ) && 
                (
                    this.StimulationInterventionType == input.StimulationInterventionType ||
                    (this.StimulationInterventionType != null &&
                    this.StimulationInterventionType.Equals(input.StimulationInterventionType))
                ) && 
                (
                    this.StimulationModeId == input.StimulationModeId ||
                    this.StimulationModeId.Equals(input.StimulationModeId)
                ) && 
                (
                    this.StimulationMode == input.StimulationMode ||
                    (this.StimulationMode != null &&
                    this.StimulationMode.Equals(input.StimulationMode))
                ) && 
                (
                    this.StimulationPolarityId == input.StimulationPolarityId ||
                    this.StimulationPolarityId.Equals(input.StimulationPolarityId)
                ) && 
                (
                    this.StimulationPolarity == input.StimulationPolarity ||
                    (this.StimulationPolarity != null &&
                    this.StimulationPolarity.Equals(input.StimulationPolarity))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RampupTime.GetHashCode();
                hashCode = (hashCode * 59) + this.RampdownTime.GetHashCode();
                hashCode = (hashCode * 59) + this.Current.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.Delay.GetHashCode();
                hashCode = (hashCode * 59) + this.Lock.GetHashCode();
                hashCode = (hashCode * 59) + this.PopulationId.GetHashCode();
                if (this.Population != null)
                {
                    hashCode = (hashCode * 59) + this.Population.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StimulationInterventionTypeId.GetHashCode();
                if (this.StimulationInterventionType != null)
                {
                    hashCode = (hashCode * 59) + this.StimulationInterventionType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StimulationModeId.GetHashCode();
                if (this.StimulationMode != null)
                {
                    hashCode = (hashCode * 59) + this.StimulationMode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StimulationPolarityId.GetHashCode();
                if (this.StimulationPolarity != null)
                {
                    hashCode = (hashCode * 59) + this.StimulationPolarity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // RampupTime (int) maximum
            if (this.RampupTime > (int)300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RampupTime, must be a value less than or equal to 300.", new [] { "RampupTime" });
            }

            // RampupTime (int) minimum
            if (this.RampupTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RampupTime, must be a value greater than or equal to 0.", new [] { "RampupTime" });
            }

            // RampdownTime (int) maximum
            if (this.RampdownTime > (int)300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RampdownTime, must be a value less than or equal to 300.", new [] { "RampdownTime" });
            }

            // RampdownTime (int) minimum
            if (this.RampdownTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RampdownTime, must be a value greater than or equal to 0.", new [] { "RampdownTime" });
            }

            // Current (int) maximum
            if (this.Current > (int)3000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Current, must be a value less than or equal to 3000.", new [] { "Current" });
            }

            // Current (int) minimum
            if (this.Current < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Current, must be a value greater than or equal to 0.", new [] { "Current" });
            }

            // Duration (int) maximum
            if (this.Duration > (int)3600)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value less than or equal to 3600.", new [] { "Duration" });
            }

            // Duration (int) minimum
            if (this.Duration < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.", new [] { "Duration" });
            }

            // Delay (int) maximum
            if (this.Delay > (int)600)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Delay, must be a value less than or equal to 600.", new [] { "Delay" });
            }

            // Delay (int) minimum
            if (this.Delay < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Delay, must be a value greater than or equal to 0.", new [] { "Delay" });
            }

            yield break;
        }
    }

}
