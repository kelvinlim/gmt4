/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SessionConfigurationDTO
    /// </summary>
    [DataContract(Name = "SessionConfigurationDTO")]
    public partial class SessionConfigurationDTO : IEquatable<SessionConfigurationDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionConfigurationDTO" /> class.
        /// </summary>
        /// <param name="administratorId">administratorId.</param>
        /// <param name="administrator">administrator.</param>
        /// <param name="populationId">populationId.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="stimulationType">stimulationType.</param>
        /// <param name="subjectId">subjectId.</param>
        /// <param name="sessionType">sessionType.</param>
        /// <param name="measures">measures.</param>
        public SessionConfigurationDTO(string administratorId = default(string), User administrator = default(User), int populationId = default(int), int sessionId = default(int), StimulationType stimulationType = default(StimulationType), string subjectId = default(string), SessionType sessionType = default(SessionType), List<Measure> measures = default(List<Measure>))
        {
            this.AdministratorId = administratorId;
            this.Administrator = administrator;
            this.PopulationId = populationId;
            this.SessionId = sessionId;
            this.StimulationType = stimulationType;
            this.SubjectId = subjectId;
            this.SessionType = sessionType;
            this.Measures = measures;
        }

        /// <summary>
        /// Gets or Sets AdministratorId
        /// </summary>
        [DataMember(Name = "administratorId", EmitDefaultValue = false)]
        public string AdministratorId { get; set; }

        /// <summary>
        /// Gets or Sets Administrator
        /// </summary>
        [DataMember(Name = "administrator", EmitDefaultValue = false)]
        public User Administrator { get; set; }

        /// <summary>
        /// Gets or Sets PopulationId
        /// </summary>
        [DataMember(Name = "populationId", EmitDefaultValue = false)]
        public int PopulationId { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name = "sessionId", EmitDefaultValue = false)]
        public int SessionId { get; set; }

        /// <summary>
        /// Gets or Sets StimulationType
        /// </summary>
        [DataMember(Name = "stimulationType", EmitDefaultValue = false)]
        public StimulationType StimulationType { get; set; }

        /// <summary>
        /// Gets or Sets SubjectId
        /// </summary>
        [DataMember(Name = "subjectId", EmitDefaultValue = false)]
        public string SubjectId { get; set; }

        /// <summary>
        /// Gets or Sets SessionType
        /// </summary>
        [DataMember(Name = "sessionType", EmitDefaultValue = false)]
        public SessionType SessionType { get; set; }

        /// <summary>
        /// Gets or Sets Measures
        /// </summary>
        [DataMember(Name = "measures", EmitDefaultValue = false)]
        public List<Measure> Measures { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionConfigurationDTO {\n");
            sb.Append("  AdministratorId: ").Append(AdministratorId).Append("\n");
            sb.Append("  Administrator: ").Append(Administrator).Append("\n");
            sb.Append("  PopulationId: ").Append(PopulationId).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  StimulationType: ").Append(StimulationType).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  Measures: ").Append(Measures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionConfigurationDTO);
        }

        /// <summary>
        /// Returns true if SessionConfigurationDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionConfigurationDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionConfigurationDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AdministratorId == input.AdministratorId ||
                    (this.AdministratorId != null &&
                    this.AdministratorId.Equals(input.AdministratorId))
                ) && 
                (
                    this.Administrator == input.Administrator ||
                    (this.Administrator != null &&
                    this.Administrator.Equals(input.Administrator))
                ) && 
                (
                    this.PopulationId == input.PopulationId ||
                    this.PopulationId.Equals(input.PopulationId)
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    this.SessionId.Equals(input.SessionId)
                ) && 
                (
                    this.StimulationType == input.StimulationType ||
                    (this.StimulationType != null &&
                    this.StimulationType.Equals(input.StimulationType))
                ) && 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    (this.SessionType != null &&
                    this.SessionType.Equals(input.SessionType))
                ) && 
                (
                    this.Measures == input.Measures ||
                    this.Measures != null &&
                    input.Measures != null &&
                    this.Measures.SequenceEqual(input.Measures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdministratorId != null)
                {
                    hashCode = (hashCode * 59) + this.AdministratorId.GetHashCode();
                }
                if (this.Administrator != null)
                {
                    hashCode = (hashCode * 59) + this.Administrator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PopulationId.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionId.GetHashCode();
                if (this.StimulationType != null)
                {
                    hashCode = (hashCode * 59) + this.StimulationType.GetHashCode();
                }
                if (this.SubjectId != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectId.GetHashCode();
                }
                if (this.SessionType != null)
                {
                    hashCode = (hashCode * 59) + this.SessionType.GetHashCode();
                }
                if (this.Measures != null)
                {
                    hashCode = (hashCode * 59) + this.Measures.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
