/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ConnectionEvent
    /// </summary>
    [DataContract(Name = "ConnectionEvent")]
    public partial class ConnectionEvent : IEquatable<ConnectionEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionEvent" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="connectionId">connectionId.</param>
        /// <param name="connection">connection.</param>
        /// <param name="connectionEventTypeId">connectionEventTypeId.</param>
        /// <param name="connectionEventType">connectionEventType.</param>
        /// <param name="id">id.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="createdDate">createdDate.</param>
        public ConnectionEvent(string data = default(string), int connectionId = default(int), Connection connection = default(Connection), int connectionEventTypeId = default(int), ConnectionEventType connectionEventType = default(ConnectionEventType), int id = default(int), bool deleted = default(bool), DateTime createdDate = default(DateTime))
        {
            this.Data = data;
            this.ConnectionId = connectionId;
            this.Connection = connection;
            this.ConnectionEventTypeId = connectionEventTypeId;
            this.ConnectionEventType = connectionEventType;
            this.Id = id;
            this.Deleted = deleted;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionId
        /// </summary>
        [DataMember(Name = "connectionId", EmitDefaultValue = false)]
        public int ConnectionId { get; set; }

        /// <summary>
        /// Gets or Sets Connection
        /// </summary>
        [DataMember(Name = "connection", EmitDefaultValue = false)]
        public Connection Connection { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionEventTypeId
        /// </summary>
        [DataMember(Name = "connectionEventTypeId", EmitDefaultValue = false)]
        public int ConnectionEventTypeId { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionEventType
        /// </summary>
        [DataMember(Name = "connectionEventType", EmitDefaultValue = false)]
        public ConnectionEventType ConnectionEventType { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionEvent {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ConnectionId: ").Append(ConnectionId).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  ConnectionEventTypeId: ").Append(ConnectionEventTypeId).Append("\n");
            sb.Append("  ConnectionEventType: ").Append(ConnectionEventType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConnectionEvent);
        }

        /// <summary>
        /// Returns true if ConnectionEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ConnectionEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectionEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.ConnectionId == input.ConnectionId ||
                    this.ConnectionId.Equals(input.ConnectionId)
                ) && 
                (
                    this.Connection == input.Connection ||
                    (this.Connection != null &&
                    this.Connection.Equals(input.Connection))
                ) && 
                (
                    this.ConnectionEventTypeId == input.ConnectionEventTypeId ||
                    this.ConnectionEventTypeId.Equals(input.ConnectionEventTypeId)
                ) && 
                (
                    this.ConnectionEventType == input.ConnectionEventType ||
                    (this.ConnectionEventType != null &&
                    this.ConnectionEventType.Equals(input.ConnectionEventType))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionId.GetHashCode();
                if (this.Connection != null)
                {
                    hashCode = (hashCode * 59) + this.Connection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionEventTypeId.GetHashCode();
                if (this.ConnectionEventType != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionEventType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
