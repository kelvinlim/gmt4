/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SessionType
    /// </summary>
    [DataContract(Name = "SessionType")]
    public partial class SessionType : IEquatable<SessionType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SessionType" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="ordinal">ordinal.</param>
        /// <param name="populationId">populationId.</param>
        /// <param name="population">population.</param>
        /// <param name="stimulationTypeId">stimulationTypeId.</param>
        /// <param name="stimulationType">stimulationType.</param>
        /// <param name="sessionTypeMeasureTypes">sessionTypeMeasureTypes.</param>
        /// <param name="_lock">_lock.</param>
        /// <param name="id">id.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="createdDate">createdDate.</param>
        public SessionType(string name = default(string), string description = default(string), int ordinal = default(int), int populationId = default(int), Population population = default(Population), int stimulationTypeId = default(int), StimulationType stimulationType = default(StimulationType), List<SessionTypeMeasureType> sessionTypeMeasureTypes = default(List<SessionTypeMeasureType>), bool _lock = default(bool), int id = default(int), bool deleted = default(bool), DateTime createdDate = default(DateTime))
        {
            this.Name = name;
            this.Description = description;
            this.Ordinal = ordinal;
            this.PopulationId = populationId;
            this.Population = population;
            this.StimulationTypeId = stimulationTypeId;
            this.StimulationType = stimulationType;
            this.SessionTypeMeasureTypes = sessionTypeMeasureTypes;
            this.Lock = _lock;
            this.Id = id;
            this.Deleted = deleted;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Ordinal
        /// </summary>
        [DataMember(Name = "ordinal", EmitDefaultValue = false)]
        public int Ordinal { get; set; }

        /// <summary>
        /// Gets or Sets PopulationId
        /// </summary>
        [DataMember(Name = "populationId", EmitDefaultValue = false)]
        public int PopulationId { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name = "population", EmitDefaultValue = false)]
        public Population Population { get; set; }

        /// <summary>
        /// Gets or Sets StimulationTypeId
        /// </summary>
        [DataMember(Name = "stimulationTypeId", EmitDefaultValue = false)]
        public int StimulationTypeId { get; set; }

        /// <summary>
        /// Gets or Sets StimulationType
        /// </summary>
        [DataMember(Name = "stimulationType", EmitDefaultValue = false)]
        public StimulationType StimulationType { get; set; }

        /// <summary>
        /// Gets or Sets SessionTypeMeasureTypes
        /// </summary>
        [DataMember(Name = "sessionTypeMeasureTypes", EmitDefaultValue = false)]
        public List<SessionTypeMeasureType> SessionTypeMeasureTypes { get; set; }

        /// <summary>
        /// Gets or Sets Lock
        /// </summary>
        [DataMember(Name = "lock", EmitDefaultValue = true)]
        public bool Lock { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SessionType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Ordinal: ").Append(Ordinal).Append("\n");
            sb.Append("  PopulationId: ").Append(PopulationId).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("  StimulationTypeId: ").Append(StimulationTypeId).Append("\n");
            sb.Append("  StimulationType: ").Append(StimulationType).Append("\n");
            sb.Append("  SessionTypeMeasureTypes: ").Append(SessionTypeMeasureTypes).Append("\n");
            sb.Append("  Lock: ").Append(Lock).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SessionType);
        }

        /// <summary>
        /// Returns true if SessionType instances are equal
        /// </summary>
        /// <param name="input">Instance of SessionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Ordinal == input.Ordinal ||
                    this.Ordinal.Equals(input.Ordinal)
                ) && 
                (
                    this.PopulationId == input.PopulationId ||
                    this.PopulationId.Equals(input.PopulationId)
                ) && 
                (
                    this.Population == input.Population ||
                    (this.Population != null &&
                    this.Population.Equals(input.Population))
                ) && 
                (
                    this.StimulationTypeId == input.StimulationTypeId ||
                    this.StimulationTypeId.Equals(input.StimulationTypeId)
                ) && 
                (
                    this.StimulationType == input.StimulationType ||
                    (this.StimulationType != null &&
                    this.StimulationType.Equals(input.StimulationType))
                ) && 
                (
                    this.SessionTypeMeasureTypes == input.SessionTypeMeasureTypes ||
                    this.SessionTypeMeasureTypes != null &&
                    input.SessionTypeMeasureTypes != null &&
                    this.SessionTypeMeasureTypes.SequenceEqual(input.SessionTypeMeasureTypes)
                ) && 
                (
                    this.Lock == input.Lock ||
                    this.Lock.Equals(input.Lock)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ordinal.GetHashCode();
                hashCode = (hashCode * 59) + this.PopulationId.GetHashCode();
                if (this.Population != null)
                {
                    hashCode = (hashCode * 59) + this.Population.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StimulationTypeId.GetHashCode();
                if (this.StimulationType != null)
                {
                    hashCode = (hashCode * 59) + this.StimulationType.GetHashCode();
                }
                if (this.SessionTypeMeasureTypes != null)
                {
                    hashCode = (hashCode * 59) + this.SessionTypeMeasureTypes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Lock.GetHashCode();
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
