/*
 * TaskFlow API
 *
 * This API is for interacting with the TaskFlow system. All core operations are handled through this API.
 *
 * The version of the OpenAPI document: v2.0
 * Contact: soude017@umn.edu
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Session
    /// </summary>
    [DataContract(Name = "Session")]
    public partial class Session : IEquatable<Session>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Session" /> class.
        /// </summary>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="complete">complete.</param>
        /// <param name="administratorId">administratorId.</param>
        /// <param name="administrator">administrator.</param>
        /// <param name="populationId">populationId.</param>
        /// <param name="population">population.</param>
        /// <param name="sessionStatusId">sessionStatusId.</param>
        /// <param name="sessionStatus">sessionStatus.</param>
        /// <param name="sessionTypeId">sessionTypeId.</param>
        /// <param name="sessionType">sessionType.</param>
        /// <param name="subjectId">subjectId.</param>
        /// <param name="subject">subject.</param>
        /// <param name="stimulationId">stimulationId.</param>
        /// <param name="stimulation">stimulation.</param>
        /// <param name="measures">measures.</param>
        /// <param name="properties">properties.</param>
        /// <param name="id">id.</param>
        /// <param name="deleted">deleted.</param>
        /// <param name="createdDate">createdDate.</param>
        public Session(DateTime start = default(DateTime), DateTime end = default(DateTime), bool complete = default(bool), string administratorId = default(string), User administrator = default(User), int populationId = default(int), Population population = default(Population), int sessionStatusId = default(int), SessionStatus sessionStatus = default(SessionStatus), int sessionTypeId = default(int), SessionType sessionType = default(SessionType), string subjectId = default(string), User subject = default(User), int stimulationId = default(int), Stimulation stimulation = default(Stimulation), List<Measure> measures = default(List<Measure>), List<SessionProperty> properties = default(List<SessionProperty>), int id = default(int), bool deleted = default(bool), DateTime createdDate = default(DateTime))
        {
            this.Start = start;
            this.End = end;
            this.Complete = complete;
            this.AdministratorId = administratorId;
            this.Administrator = administrator;
            this.PopulationId = populationId;
            this.Population = population;
            this.SessionStatusId = sessionStatusId;
            this.SessionStatus = sessionStatus;
            this.SessionTypeId = sessionTypeId;
            this.SessionType = sessionType;
            this.SubjectId = subjectId;
            this.Subject = subject;
            this.StimulationId = stimulationId;
            this.Stimulation = stimulation;
            this.Measures = measures;
            this.Properties = properties;
            this.Id = id;
            this.Deleted = deleted;
            this.CreatedDate = createdDate;
        }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public DateTime Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public DateTime End { get; set; }

        /// <summary>
        /// Gets or Sets Complete
        /// </summary>
        [DataMember(Name = "complete", EmitDefaultValue = true)]
        public bool Complete { get; set; }

        /// <summary>
        /// Gets or Sets AdministratorId
        /// </summary>
        [DataMember(Name = "administratorId", EmitDefaultValue = false)]
        public string AdministratorId { get; set; }

        /// <summary>
        /// Gets or Sets Administrator
        /// </summary>
        [DataMember(Name = "administrator", EmitDefaultValue = false)]
        public User Administrator { get; set; }

        /// <summary>
        /// Gets or Sets PopulationId
        /// </summary>
        [DataMember(Name = "populationId", EmitDefaultValue = false)]
        public int PopulationId { get; set; }

        /// <summary>
        /// Gets or Sets Population
        /// </summary>
        [DataMember(Name = "population", EmitDefaultValue = false)]
        public Population Population { get; set; }

        /// <summary>
        /// Gets or Sets SessionStatusId
        /// </summary>
        [DataMember(Name = "sessionStatusId", EmitDefaultValue = false)]
        public int SessionStatusId { get; set; }

        /// <summary>
        /// Gets or Sets SessionStatus
        /// </summary>
        [DataMember(Name = "sessionStatus", EmitDefaultValue = false)]
        public SessionStatus SessionStatus { get; set; }

        /// <summary>
        /// Gets or Sets SessionTypeId
        /// </summary>
        [DataMember(Name = "sessionTypeId", EmitDefaultValue = false)]
        public int SessionTypeId { get; set; }

        /// <summary>
        /// Gets or Sets SessionType
        /// </summary>
        [DataMember(Name = "sessionType", EmitDefaultValue = false)]
        public SessionType SessionType { get; set; }

        /// <summary>
        /// Gets or Sets SubjectId
        /// </summary>
        [DataMember(Name = "subjectId", EmitDefaultValue = false)]
        public string SubjectId { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public User Subject { get; set; }

        /// <summary>
        /// Gets or Sets StimulationId
        /// </summary>
        [DataMember(Name = "stimulationId", EmitDefaultValue = false)]
        public int StimulationId { get; set; }

        /// <summary>
        /// Gets or Sets Stimulation
        /// </summary>
        [DataMember(Name = "stimulation", EmitDefaultValue = false)]
        public Stimulation Stimulation { get; set; }

        /// <summary>
        /// Gets or Sets Measures
        /// </summary>
        [DataMember(Name = "measures", EmitDefaultValue = false)]
        public List<Measure> Measures { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public List<SessionProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Deleted
        /// </summary>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Session {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  AdministratorId: ").Append(AdministratorId).Append("\n");
            sb.Append("  Administrator: ").Append(Administrator).Append("\n");
            sb.Append("  PopulationId: ").Append(PopulationId).Append("\n");
            sb.Append("  Population: ").Append(Population).Append("\n");
            sb.Append("  SessionStatusId: ").Append(SessionStatusId).Append("\n");
            sb.Append("  SessionStatus: ").Append(SessionStatus).Append("\n");
            sb.Append("  SessionTypeId: ").Append(SessionTypeId).Append("\n");
            sb.Append("  SessionType: ").Append(SessionType).Append("\n");
            sb.Append("  SubjectId: ").Append(SubjectId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  StimulationId: ").Append(StimulationId).Append("\n");
            sb.Append("  Stimulation: ").Append(Stimulation).Append("\n");
            sb.Append("  Measures: ").Append(Measures).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Session);
        }

        /// <summary>
        /// Returns true if Session instances are equal
        /// </summary>
        /// <param name="input">Instance of Session to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Session input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Complete == input.Complete ||
                    this.Complete.Equals(input.Complete)
                ) && 
                (
                    this.AdministratorId == input.AdministratorId ||
                    (this.AdministratorId != null &&
                    this.AdministratorId.Equals(input.AdministratorId))
                ) && 
                (
                    this.Administrator == input.Administrator ||
                    (this.Administrator != null &&
                    this.Administrator.Equals(input.Administrator))
                ) && 
                (
                    this.PopulationId == input.PopulationId ||
                    this.PopulationId.Equals(input.PopulationId)
                ) && 
                (
                    this.Population == input.Population ||
                    (this.Population != null &&
                    this.Population.Equals(input.Population))
                ) && 
                (
                    this.SessionStatusId == input.SessionStatusId ||
                    this.SessionStatusId.Equals(input.SessionStatusId)
                ) && 
                (
                    this.SessionStatus == input.SessionStatus ||
                    (this.SessionStatus != null &&
                    this.SessionStatus.Equals(input.SessionStatus))
                ) && 
                (
                    this.SessionTypeId == input.SessionTypeId ||
                    this.SessionTypeId.Equals(input.SessionTypeId)
                ) && 
                (
                    this.SessionType == input.SessionType ||
                    (this.SessionType != null &&
                    this.SessionType.Equals(input.SessionType))
                ) && 
                (
                    this.SubjectId == input.SubjectId ||
                    (this.SubjectId != null &&
                    this.SubjectId.Equals(input.SubjectId))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.StimulationId == input.StimulationId ||
                    this.StimulationId.Equals(input.StimulationId)
                ) && 
                (
                    this.Stimulation == input.Stimulation ||
                    (this.Stimulation != null &&
                    this.Stimulation.Equals(input.Stimulation))
                ) && 
                (
                    this.Measures == input.Measures ||
                    this.Measures != null &&
                    input.Measures != null &&
                    this.Measures.SequenceEqual(input.Measures)
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Deleted == input.Deleted ||
                    this.Deleted.Equals(input.Deleted)
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Complete.GetHashCode();
                if (this.AdministratorId != null)
                {
                    hashCode = (hashCode * 59) + this.AdministratorId.GetHashCode();
                }
                if (this.Administrator != null)
                {
                    hashCode = (hashCode * 59) + this.Administrator.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PopulationId.GetHashCode();
                if (this.Population != null)
                {
                    hashCode = (hashCode * 59) + this.Population.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SessionStatusId.GetHashCode();
                if (this.SessionStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SessionStatus.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SessionTypeId.GetHashCode();
                if (this.SessionType != null)
                {
                    hashCode = (hashCode * 59) + this.SessionType.GetHashCode();
                }
                if (this.SubjectId != null)
                {
                    hashCode = (hashCode * 59) + this.SubjectId.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StimulationId.GetHashCode();
                if (this.Stimulation != null)
                {
                    hashCode = (hashCode * 59) + this.Stimulation.GetHashCode();
                }
                if (this.Measures != null)
                {
                    hashCode = (hashCode * 59) + this.Measures.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.Deleted.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
